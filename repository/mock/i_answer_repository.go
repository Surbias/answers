// Code generated by genmock. DO NOT EDIT.
//  genmock version: v0.0.7

// Package mock contains mock implementer of the IAnswerRepository interface.
package mock

import (
	"bequest/answers/model"
	"fmt"

	"gitlab.com/so_literate/genmock"
)

// IAnswerRepository_Mock implements mock of the IAnswerRepository interface.
type IAnswerRepository_Mock struct {
	Mock *genmock.Mock
	t    genmock.TestingT

	ReturnMockErrorAsResult bool
}

// NewIAnswerRepository_Mock returns a new mock of IAnswerRepository interface implementer.
// Takes *testing.T to stop failed testing process.
func NewIAnswerRepository_Mock(t genmock.TestingT) *IAnswerRepository_Mock {
	return &IAnswerRepository_Mock{
		Mock: genmock.NewMock(),
		t:    t,
	}
}

func (_m *IAnswerRepository_Mock) CreateAnswer(answer model.Answer) (model.Answer, error) {
	_m.t.Helper()

	_ret, _err := _m.Mock.MethodCalled("CreateAnswer", answer)
	if _err != nil {
		if _m.ReturnMockErrorAsResult {
			return model.Answer{}, fmt.Errorf("(CreateAnswer) call mock method: %w", _err)
		}
		_m.t.Fatalf("(CreateAnswer) call mock method: %s", _err)
	}

	if len(_ret) != 2 {
		_err = fmt.Errorf("%w: want 2, got %d", genmock.ErrWrongReturnedLenght, len(_ret))
		if _m.ReturnMockErrorAsResult {
			return model.Answer{}, fmt.Errorf("(CreateAnswer) check length of returned params: %w", _err)
		}
		_m.t.Fatalf("(CreateAnswer) check length of returned params: %s", _err)
	}

	var _r0 model.Answer
	if _v, _ok := _ret[0].(model.Answer); _ok {
		_r0 = _v
	} else {
		_err = fmt.Errorf("%w [ret #0]: want 'model.Answer', got: %[2]T(%#[2]v)", genmock.ErrUnexpectedArgumentType, _ret[0])
		if _m.ReturnMockErrorAsResult {
			return model.Answer{}, fmt.Errorf("(CreateAnswer) check returned type: %w", _err)
		}
		_m.t.Fatalf("(CreateAnswer) check returned type: %s", _err)
	}

	var _r1 error
	if _r := _ret[1]; _r != nil {
		if _v, _ok := _r.(error); _ok {
			_r1 = _v
		} else {
			_err = fmt.Errorf("%w [ret #1]: want 'error', got: %[2]T(%#[2]v)", genmock.ErrUnexpectedArgumentType, _r)
			if _m.ReturnMockErrorAsResult {
				return model.Answer{}, fmt.Errorf("(CreateAnswer) check returned type: %w", _err)
			}
			_m.t.Fatalf("(CreateAnswer) check returned type: %s", _err)
		}
	}

	return _r0, _r1
}

func (_m *IAnswerRepository_Mock) DeleteAnswerByKey(key string) ([]model.Answer, error) {
	_m.t.Helper()

	_ret, _err := _m.Mock.MethodCalled("DeleteAnswerByKey", key)
	if _err != nil {
		if _m.ReturnMockErrorAsResult {
			return nil, fmt.Errorf("(DeleteAnswerByKey) call mock method: %w", _err)
		}
		_m.t.Fatalf("(DeleteAnswerByKey) call mock method: %s", _err)
	}

	if len(_ret) != 2 {
		_err = fmt.Errorf("%w: want 2, got %d", genmock.ErrWrongReturnedLenght, len(_ret))
		if _m.ReturnMockErrorAsResult {
			return nil, fmt.Errorf("(DeleteAnswerByKey) check length of returned params: %w", _err)
		}
		_m.t.Fatalf("(DeleteAnswerByKey) check length of returned params: %s", _err)
	}

	var _r0 []model.Answer
	if _v, _ok := _ret[0].([]model.Answer); _ok {
		_r0 = _v
	} else {
		_err = fmt.Errorf("%w [ret #0]: want '[]model.Answer', got: %[2]T(%#[2]v)", genmock.ErrUnexpectedArgumentType, _ret[0])
		if _m.ReturnMockErrorAsResult {
			return nil, fmt.Errorf("(DeleteAnswerByKey) check returned type: %w", _err)
		}
		_m.t.Fatalf("(DeleteAnswerByKey) check returned type: %s", _err)
	}

	var _r1 error
	if _r := _ret[1]; _r != nil {
		if _v, _ok := _r.(error); _ok {
			_r1 = _v
		} else {
			_err = fmt.Errorf("%w [ret #1]: want 'error', got: %[2]T(%#[2]v)", genmock.ErrUnexpectedArgumentType, _r)
			if _m.ReturnMockErrorAsResult {
				return nil, fmt.Errorf("(DeleteAnswerByKey) check returned type: %w", _err)
			}
			_m.t.Fatalf("(DeleteAnswerByKey) check returned type: %s", _err)
		}
	}

	return _r0, _r1
}

func (_m *IAnswerRepository_Mock) GetAnswerByKey(key string) (model.Answer, error) {
	_m.t.Helper()

	_ret, _err := _m.Mock.MethodCalled("GetAnswerByKey", key)
	if _err != nil {
		if _m.ReturnMockErrorAsResult {
			return model.Answer{}, fmt.Errorf("(GetAnswerByKey) call mock method: %w", _err)
		}
		_m.t.Fatalf("(GetAnswerByKey) call mock method: %s", _err)
	}

	if len(_ret) != 2 {
		_err = fmt.Errorf("%w: want 2, got %d", genmock.ErrWrongReturnedLenght, len(_ret))
		if _m.ReturnMockErrorAsResult {
			return model.Answer{}, fmt.Errorf("(GetAnswerByKey) check length of returned params: %w", _err)
		}
		_m.t.Fatalf("(GetAnswerByKey) check length of returned params: %s", _err)
	}

	var _r0 model.Answer
	if _v, _ok := _ret[0].(model.Answer); _ok {
		_r0 = _v
	} else {
		_err = fmt.Errorf("%w [ret #0]: want 'model.Answer', got: %[2]T(%#[2]v)", genmock.ErrUnexpectedArgumentType, _ret[0])
		if _m.ReturnMockErrorAsResult {
			return model.Answer{}, fmt.Errorf("(GetAnswerByKey) check returned type: %w", _err)
		}
		_m.t.Fatalf("(GetAnswerByKey) check returned type: %s", _err)
	}

	var _r1 error
	if _r := _ret[1]; _r != nil {
		if _v, _ok := _r.(error); _ok {
			_r1 = _v
		} else {
			_err = fmt.Errorf("%w [ret #1]: want 'error', got: %[2]T(%#[2]v)", genmock.ErrUnexpectedArgumentType, _r)
			if _m.ReturnMockErrorAsResult {
				return model.Answer{}, fmt.Errorf("(GetAnswerByKey) check returned type: %w", _err)
			}
			_m.t.Fatalf("(GetAnswerByKey) check returned type: %s", _err)
		}
	}

	return _r0, _r1
}

func (_m *IAnswerRepository_Mock) UpdateAnswerByKey(key string, updateAnswer model.UpdateAnswer) (model.Answer, error) {
	_m.t.Helper()

	_ret, _err := _m.Mock.MethodCalled("UpdateAnswerByKey", key, updateAnswer)
	if _err != nil {
		if _m.ReturnMockErrorAsResult {
			return model.Answer{}, fmt.Errorf("(UpdateAnswerByKey) call mock method: %w", _err)
		}
		_m.t.Fatalf("(UpdateAnswerByKey) call mock method: %s", _err)
	}

	if len(_ret) != 2 {
		_err = fmt.Errorf("%w: want 2, got %d", genmock.ErrWrongReturnedLenght, len(_ret))
		if _m.ReturnMockErrorAsResult {
			return model.Answer{}, fmt.Errorf("(UpdateAnswerByKey) check length of returned params: %w", _err)
		}
		_m.t.Fatalf("(UpdateAnswerByKey) check length of returned params: %s", _err)
	}

	var _r0 model.Answer
	if _v, _ok := _ret[0].(model.Answer); _ok {
		_r0 = _v
	} else {
		_err = fmt.Errorf("%w [ret #0]: want 'model.Answer', got: %[2]T(%#[2]v)", genmock.ErrUnexpectedArgumentType, _ret[0])
		if _m.ReturnMockErrorAsResult {
			return model.Answer{}, fmt.Errorf("(UpdateAnswerByKey) check returned type: %w", _err)
		}
		_m.t.Fatalf("(UpdateAnswerByKey) check returned type: %s", _err)
	}

	var _r1 error
	if _r := _ret[1]; _r != nil {
		if _v, _ok := _r.(error); _ok {
			_r1 = _v
		} else {
			_err = fmt.Errorf("%w [ret #1]: want 'error', got: %[2]T(%#[2]v)", genmock.ErrUnexpectedArgumentType, _r)
			if _m.ReturnMockErrorAsResult {
				return model.Answer{}, fmt.Errorf("(UpdateAnswerByKey) check returned type: %w", _err)
			}
			_m.t.Fatalf("(UpdateAnswerByKey) check returned type: %s", _err)
		}
	}

	return _r0, _r1
}

// IAnswerRepository_MockSet_CreateAnswer allows to set arguments and results of the mock call CreateAnswer.
type IAnswerRepository_MockSet_CreateAnswer struct {
	Call *genmock.Call
}

// On_CreateAnswer adds a call of the Method to mock.
func (_m *IAnswerRepository_Mock) On_CreateAnswer() IAnswerRepository_MockSet_CreateAnswer {
	call := genmock.NewCall(
		"CreateAnswer",
		[]interface{}{genmock.AnythingOfType("model.Answer")},
		[]interface{}{model.Answer{}, nil},
		1,
	)
	_m.Mock.AddCall(call)
	return IAnswerRepository_MockSet_CreateAnswer{Call: call}
}

// Args sets the exact values of the arguments.
func (_s IAnswerRepository_MockSet_CreateAnswer) Args(answer model.Answer) IAnswerRepository_MockSet_CreateAnswer {
	_s.Call.Args[0] = answer
	return _s
}

// ArgsAnything sets the interface values of the arguments.
func (_s IAnswerRepository_MockSet_CreateAnswer) ArgsAnything(answer interface{}) IAnswerRepository_MockSet_CreateAnswer {
	_s.Call.Args[0] = answer
	return _s
}

// Arg_answer_Matcher sets matcher of the answer argument value.
func (_s IAnswerRepository_MockSet_CreateAnswer) Arg_answer_Matcher(matcher func(answer model.Answer) bool) IAnswerRepository_MockSet_CreateAnswer {
	realMatcher := func(arg interface{}) bool {
		value, ok := arg.(model.Answer)
		if !ok {
			return false
		}
		return matcher(value)
	}

	_s.Call.Args[0] = realMatcher
	return _s
}

// Rets sets the exact values of the result parameters.
func (_s IAnswerRepository_MockSet_CreateAnswer) Rets(_r0 model.Answer, _r1 error) IAnswerRepository_MockSet_CreateAnswer {
	_s.Call.Returns[0] = _r0
	_s.Call.Returns[1] = _r1
	return _s
}

// Ret_r0 sets the exact values of the _r0 result parameter.
func (_s IAnswerRepository_MockSet_CreateAnswer) Ret_r0(_r0 model.Answer) IAnswerRepository_MockSet_CreateAnswer {
	_s.Call.Returns[0] = _r0
	return _s
}

// Ret_r1 sets the exact values of the _r1 result parameter.
func (_s IAnswerRepository_MockSet_CreateAnswer) Ret_r1(_r1 error) IAnswerRepository_MockSet_CreateAnswer {
	_s.Call.Returns[1] = _r1
	return _s
}

// Times sets number of times to call this caller of the method.
func (_s IAnswerRepository_MockSet_CreateAnswer) Times(times int) IAnswerRepository_MockSet_CreateAnswer {
	_s.Call.Times = times
	return _s
}

// IAnswerRepository_MockSet_DeleteAnswerByKey allows to set arguments and results of the mock call DeleteAnswerByKey.
type IAnswerRepository_MockSet_DeleteAnswerByKey struct {
	Call *genmock.Call
}

// On_DeleteAnswerByKey adds a call of the Method to mock.
func (_m *IAnswerRepository_Mock) On_DeleteAnswerByKey() IAnswerRepository_MockSet_DeleteAnswerByKey {
	call := genmock.NewCall(
		"DeleteAnswerByKey",
		[]interface{}{genmock.AnythingOfType("string")},
		[]interface{}{nil, nil},
		1,
	)
	_m.Mock.AddCall(call)
	return IAnswerRepository_MockSet_DeleteAnswerByKey{Call: call}
}

// Args sets the exact values of the arguments.
func (_s IAnswerRepository_MockSet_DeleteAnswerByKey) Args(key string) IAnswerRepository_MockSet_DeleteAnswerByKey {
	_s.Call.Args[0] = key
	return _s
}

// ArgsAnything sets the interface values of the arguments.
func (_s IAnswerRepository_MockSet_DeleteAnswerByKey) ArgsAnything(key interface{}) IAnswerRepository_MockSet_DeleteAnswerByKey {
	_s.Call.Args[0] = key
	return _s
}

// Arg_key_Matcher sets matcher of the key argument value.
func (_s IAnswerRepository_MockSet_DeleteAnswerByKey) Arg_key_Matcher(matcher func(key string) bool) IAnswerRepository_MockSet_DeleteAnswerByKey {
	realMatcher := func(arg interface{}) bool {
		value, ok := arg.(string)
		if !ok {
			return false
		}
		return matcher(value)
	}

	_s.Call.Args[0] = realMatcher
	return _s
}

// Rets sets the exact values of the result parameters.
func (_s IAnswerRepository_MockSet_DeleteAnswerByKey) Rets(_r0 []model.Answer, _r1 error) IAnswerRepository_MockSet_DeleteAnswerByKey {
	_s.Call.Returns[0] = _r0
	_s.Call.Returns[1] = _r1
	return _s
}

// Ret_r0 sets the exact values of the _r0 result parameter.
func (_s IAnswerRepository_MockSet_DeleteAnswerByKey) Ret_r0(_r0 []model.Answer) IAnswerRepository_MockSet_DeleteAnswerByKey {
	_s.Call.Returns[0] = _r0
	return _s
}

// Ret_r1 sets the exact values of the _r1 result parameter.
func (_s IAnswerRepository_MockSet_DeleteAnswerByKey) Ret_r1(_r1 error) IAnswerRepository_MockSet_DeleteAnswerByKey {
	_s.Call.Returns[1] = _r1
	return _s
}

// Times sets number of times to call this caller of the method.
func (_s IAnswerRepository_MockSet_DeleteAnswerByKey) Times(times int) IAnswerRepository_MockSet_DeleteAnswerByKey {
	_s.Call.Times = times
	return _s
}

// IAnswerRepository_MockSet_GetAnswerByKey allows to set arguments and results of the mock call GetAnswerByKey.
type IAnswerRepository_MockSet_GetAnswerByKey struct {
	Call *genmock.Call
}

// On_GetAnswerByKey adds a call of the Method to mock.
func (_m *IAnswerRepository_Mock) On_GetAnswerByKey() IAnswerRepository_MockSet_GetAnswerByKey {
	call := genmock.NewCall(
		"GetAnswerByKey",
		[]interface{}{genmock.AnythingOfType("string")},
		[]interface{}{model.Answer{}, nil},
		1,
	)
	_m.Mock.AddCall(call)
	return IAnswerRepository_MockSet_GetAnswerByKey{Call: call}
}

// Args sets the exact values of the arguments.
func (_s IAnswerRepository_MockSet_GetAnswerByKey) Args(key string) IAnswerRepository_MockSet_GetAnswerByKey {
	_s.Call.Args[0] = key
	return _s
}

// ArgsAnything sets the interface values of the arguments.
func (_s IAnswerRepository_MockSet_GetAnswerByKey) ArgsAnything(key interface{}) IAnswerRepository_MockSet_GetAnswerByKey {
	_s.Call.Args[0] = key
	return _s
}

// Arg_key_Matcher sets matcher of the key argument value.
func (_s IAnswerRepository_MockSet_GetAnswerByKey) Arg_key_Matcher(matcher func(key string) bool) IAnswerRepository_MockSet_GetAnswerByKey {
	realMatcher := func(arg interface{}) bool {
		value, ok := arg.(string)
		if !ok {
			return false
		}
		return matcher(value)
	}

	_s.Call.Args[0] = realMatcher
	return _s
}

// Rets sets the exact values of the result parameters.
func (_s IAnswerRepository_MockSet_GetAnswerByKey) Rets(_r0 model.Answer, _r1 error) IAnswerRepository_MockSet_GetAnswerByKey {
	_s.Call.Returns[0] = _r0
	_s.Call.Returns[1] = _r1
	return _s
}

// Ret_r0 sets the exact values of the _r0 result parameter.
func (_s IAnswerRepository_MockSet_GetAnswerByKey) Ret_r0(_r0 model.Answer) IAnswerRepository_MockSet_GetAnswerByKey {
	_s.Call.Returns[0] = _r0
	return _s
}

// Ret_r1 sets the exact values of the _r1 result parameter.
func (_s IAnswerRepository_MockSet_GetAnswerByKey) Ret_r1(_r1 error) IAnswerRepository_MockSet_GetAnswerByKey {
	_s.Call.Returns[1] = _r1
	return _s
}

// Times sets number of times to call this caller of the method.
func (_s IAnswerRepository_MockSet_GetAnswerByKey) Times(times int) IAnswerRepository_MockSet_GetAnswerByKey {
	_s.Call.Times = times
	return _s
}

// IAnswerRepository_MockSet_UpdateAnswerByKey allows to set arguments and results of the mock call UpdateAnswerByKey.
type IAnswerRepository_MockSet_UpdateAnswerByKey struct {
	Call *genmock.Call
}

// On_UpdateAnswerByKey adds a call of the Method to mock.
func (_m *IAnswerRepository_Mock) On_UpdateAnswerByKey() IAnswerRepository_MockSet_UpdateAnswerByKey {
	call := genmock.NewCall(
		"UpdateAnswerByKey",
		[]interface{}{genmock.AnythingOfType("string"), genmock.AnythingOfType("model.UpdateAnswer")},
		[]interface{}{model.Answer{}, nil},
		1,
	)
	_m.Mock.AddCall(call)
	return IAnswerRepository_MockSet_UpdateAnswerByKey{Call: call}
}

// Args sets the exact values of the arguments.
func (_s IAnswerRepository_MockSet_UpdateAnswerByKey) Args(key string, updateAnswer model.UpdateAnswer) IAnswerRepository_MockSet_UpdateAnswerByKey {
	_s.Call.Args[0] = key
	_s.Call.Args[1] = updateAnswer
	return _s
}

// ArgsAnything sets the interface values of the arguments.
func (_s IAnswerRepository_MockSet_UpdateAnswerByKey) ArgsAnything(key interface{}, updateAnswer interface{}) IAnswerRepository_MockSet_UpdateAnswerByKey {
	_s.Call.Args[0] = key
	_s.Call.Args[1] = updateAnswer
	return _s
}

// Arg_key sets the exact value of the key argument.
func (_s IAnswerRepository_MockSet_UpdateAnswerByKey) Arg_key(key string) IAnswerRepository_MockSet_UpdateAnswerByKey {
	_s.Call.Args[0] = key
	return _s
}

// Arg_key_Anything sets the interface value of the key argument.
func (_s IAnswerRepository_MockSet_UpdateAnswerByKey) Arg_key_Anything(key interface{}) IAnswerRepository_MockSet_UpdateAnswerByKey {
	_s.Call.Args[0] = key
	return _s
}

// Arg_key_Matcher sets matcher of the key argument value.
func (_s IAnswerRepository_MockSet_UpdateAnswerByKey) Arg_key_Matcher(matcher func(key string) bool) IAnswerRepository_MockSet_UpdateAnswerByKey {
	realMatcher := func(arg interface{}) bool {
		value, ok := arg.(string)
		if !ok {
			return false
		}
		return matcher(value)
	}

	_s.Call.Args[0] = realMatcher
	return _s
}

// Arg_updateAnswer sets the exact value of the updateAnswer argument.
func (_s IAnswerRepository_MockSet_UpdateAnswerByKey) Arg_updateAnswer(updateAnswer model.UpdateAnswer) IAnswerRepository_MockSet_UpdateAnswerByKey {
	_s.Call.Args[1] = updateAnswer
	return _s
}

// Arg_updateAnswer_Anything sets the interface value of the updateAnswer argument.
func (_s IAnswerRepository_MockSet_UpdateAnswerByKey) Arg_updateAnswer_Anything(updateAnswer interface{}) IAnswerRepository_MockSet_UpdateAnswerByKey {
	_s.Call.Args[1] = updateAnswer
	return _s
}

// Arg_updateAnswer_Matcher sets matcher of the updateAnswer argument value.
func (_s IAnswerRepository_MockSet_UpdateAnswerByKey) Arg_updateAnswer_Matcher(matcher func(updateAnswer model.UpdateAnswer) bool) IAnswerRepository_MockSet_UpdateAnswerByKey {
	realMatcher := func(arg interface{}) bool {
		value, ok := arg.(model.UpdateAnswer)
		if !ok {
			return false
		}
		return matcher(value)
	}

	_s.Call.Args[1] = realMatcher
	return _s
}

// Rets sets the exact values of the result parameters.
func (_s IAnswerRepository_MockSet_UpdateAnswerByKey) Rets(_r0 model.Answer, _r1 error) IAnswerRepository_MockSet_UpdateAnswerByKey {
	_s.Call.Returns[0] = _r0
	_s.Call.Returns[1] = _r1
	return _s
}

// Ret_r0 sets the exact values of the _r0 result parameter.
func (_s IAnswerRepository_MockSet_UpdateAnswerByKey) Ret_r0(_r0 model.Answer) IAnswerRepository_MockSet_UpdateAnswerByKey {
	_s.Call.Returns[0] = _r0
	return _s
}

// Ret_r1 sets the exact values of the _r1 result parameter.
func (_s IAnswerRepository_MockSet_UpdateAnswerByKey) Ret_r1(_r1 error) IAnswerRepository_MockSet_UpdateAnswerByKey {
	_s.Call.Returns[1] = _r1
	return _s
}

// Times sets number of times to call this caller of the method.
func (_s IAnswerRepository_MockSet_UpdateAnswerByKey) Times(times int) IAnswerRepository_MockSet_UpdateAnswerByKey {
	_s.Call.Times = times
	return _s
}
