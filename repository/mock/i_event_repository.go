// Code generated by genmock. DO NOT EDIT.
//  genmock version: v0.0.7

// Package mock contains mock implementer of the IEventRepository interface.
package mock

import (
	"bequest/answers/model"
	"fmt"

	"gitlab.com/so_literate/genmock"
)

// IEventRepository_Mock implements mock of the IEventRepository interface.
type IEventRepository_Mock struct {
	Mock *genmock.Mock
	t    genmock.TestingT

	ReturnMockErrorAsResult bool
}

// NewIEventRepository_Mock returns a new mock of IEventRepository interface implementer.
// Takes *testing.T to stop failed testing process.
func NewIEventRepository_Mock(t genmock.TestingT) *IEventRepository_Mock {
	return &IEventRepository_Mock{
		Mock: genmock.NewMock(),
		t:    t,
	}
}

func (_m *IEventRepository_Mock) CreateEventByKey(event model.IEvent) error {
	_m.t.Helper()

	_ret, _err := _m.Mock.MethodCalled("CreateEventByKey", event)
	if _err != nil {
		if _m.ReturnMockErrorAsResult {
			return fmt.Errorf("(CreateEventByKey) call mock method: %w", _err)
		}
		_m.t.Fatalf("(CreateEventByKey) call mock method: %s", _err)
	}

	if len(_ret) != 1 {
		_err = fmt.Errorf("%w: want 1, got %d", genmock.ErrWrongReturnedLenght, len(_ret))
		if _m.ReturnMockErrorAsResult {
			return fmt.Errorf("(CreateEventByKey) check length of returned params: %w", _err)
		}
		_m.t.Fatalf("(CreateEventByKey) check length of returned params: %s", _err)
	}

	var _r0 error
	if _r := _ret[0]; _r != nil {
		if _v, _ok := _r.(error); _ok {
			_r0 = _v
		} else {
			_err = fmt.Errorf("%w [ret #0]: want 'error', got: %[2]T(%#[2]v)", genmock.ErrUnexpectedArgumentType, _r)
			if _m.ReturnMockErrorAsResult {
				return fmt.Errorf("(CreateEventByKey) check returned type: %w", _err)
			}
			_m.t.Fatalf("(CreateEventByKey) check returned type: %s", _err)
		}
	}

	return _r0
}

func (_m *IEventRepository_Mock) GetEventsByKey(key string) ([]model.IEvent, error) {
	_m.t.Helper()

	_ret, _err := _m.Mock.MethodCalled("GetEventsByKey", key)
	if _err != nil {
		if _m.ReturnMockErrorAsResult {
			return nil, fmt.Errorf("(GetEventsByKey) call mock method: %w", _err)
		}
		_m.t.Fatalf("(GetEventsByKey) call mock method: %s", _err)
	}

	if len(_ret) != 2 {
		_err = fmt.Errorf("%w: want 2, got %d", genmock.ErrWrongReturnedLenght, len(_ret))
		if _m.ReturnMockErrorAsResult {
			return nil, fmt.Errorf("(GetEventsByKey) check length of returned params: %w", _err)
		}
		_m.t.Fatalf("(GetEventsByKey) check length of returned params: %s", _err)
	}

	var _r0 []model.IEvent
	if _v, _ok := _ret[0].([]model.IEvent); _ok {
		_r0 = _v
	} else {
		_err = fmt.Errorf("%w [ret #0]: want '[]model.IEvent', got: %[2]T(%#[2]v)", genmock.ErrUnexpectedArgumentType, _ret[0])
		if _m.ReturnMockErrorAsResult {
			return nil, fmt.Errorf("(GetEventsByKey) check returned type: %w", _err)
		}
		_m.t.Fatalf("(GetEventsByKey) check returned type: %s", _err)
	}

	var _r1 error
	if _r := _ret[1]; _r != nil {
		if _v, _ok := _r.(error); _ok {
			_r1 = _v
		} else {
			_err = fmt.Errorf("%w [ret #1]: want 'error', got: %[2]T(%#[2]v)", genmock.ErrUnexpectedArgumentType, _r)
			if _m.ReturnMockErrorAsResult {
				return nil, fmt.Errorf("(GetEventsByKey) check returned type: %w", _err)
			}
			_m.t.Fatalf("(GetEventsByKey) check returned type: %s", _err)
		}
	}

	return _r0, _r1
}

// IEventRepository_MockSet_CreateEventByKey allows to set arguments and results of the mock call CreateEventByKey.
type IEventRepository_MockSet_CreateEventByKey struct {
	Call *genmock.Call
}

// On_CreateEventByKey adds a call of the Method to mock.
func (_m *IEventRepository_Mock) On_CreateEventByKey() IEventRepository_MockSet_CreateEventByKey {
	call := genmock.NewCall(
		"CreateEventByKey",
		[]interface{}{genmock.Anything},
		[]interface{}{nil},
		1,
	)
	_m.Mock.AddCall(call)
	return IEventRepository_MockSet_CreateEventByKey{Call: call}
}

// Args sets the exact values of the arguments.
func (_s IEventRepository_MockSet_CreateEventByKey) Args(event model.IEvent) IEventRepository_MockSet_CreateEventByKey {
	_s.Call.Args[0] = event
	return _s
}

// ArgsAnything sets the interface values of the arguments.
func (_s IEventRepository_MockSet_CreateEventByKey) ArgsAnything(event interface{}) IEventRepository_MockSet_CreateEventByKey {
	_s.Call.Args[0] = event
	return _s
}

// Arg_event_Matcher sets matcher of the event argument value.
func (_s IEventRepository_MockSet_CreateEventByKey) Arg_event_Matcher(matcher func(event interface{}) bool) IEventRepository_MockSet_CreateEventByKey {
	_s.Call.Args[0] = matcher
	return _s
}

// Rets sets the exact values of the result parameters.
func (_s IEventRepository_MockSet_CreateEventByKey) Rets(_r0 error) IEventRepository_MockSet_CreateEventByKey {
	_s.Call.Returns[0] = _r0
	return _s
}

// Times sets number of times to call this caller of the method.
func (_s IEventRepository_MockSet_CreateEventByKey) Times(times int) IEventRepository_MockSet_CreateEventByKey {
	_s.Call.Times = times
	return _s
}

// IEventRepository_MockSet_GetEventsByKey allows to set arguments and results of the mock call GetEventsByKey.
type IEventRepository_MockSet_GetEventsByKey struct {
	Call *genmock.Call
}

// On_GetEventsByKey adds a call of the Method to mock.
func (_m *IEventRepository_Mock) On_GetEventsByKey() IEventRepository_MockSet_GetEventsByKey {
	call := genmock.NewCall(
		"GetEventsByKey",
		[]interface{}{genmock.AnythingOfType("string")},
		[]interface{}{nil, nil},
		1,
	)
	_m.Mock.AddCall(call)
	return IEventRepository_MockSet_GetEventsByKey{Call: call}
}

// Args sets the exact values of the arguments.
func (_s IEventRepository_MockSet_GetEventsByKey) Args(key string) IEventRepository_MockSet_GetEventsByKey {
	_s.Call.Args[0] = key
	return _s
}

// ArgsAnything sets the interface values of the arguments.
func (_s IEventRepository_MockSet_GetEventsByKey) ArgsAnything(key interface{}) IEventRepository_MockSet_GetEventsByKey {
	_s.Call.Args[0] = key
	return _s
}

// Arg_key_Matcher sets matcher of the key argument value.
func (_s IEventRepository_MockSet_GetEventsByKey) Arg_key_Matcher(matcher func(key string) bool) IEventRepository_MockSet_GetEventsByKey {
	realMatcher := func(arg interface{}) bool {
		value, ok := arg.(string)
		if !ok {
			return false
		}
		return matcher(value)
	}

	_s.Call.Args[0] = realMatcher
	return _s
}

// Rets sets the exact values of the result parameters.
func (_s IEventRepository_MockSet_GetEventsByKey) Rets(_r0 []model.IEvent, _r1 error) IEventRepository_MockSet_GetEventsByKey {
	_s.Call.Returns[0] = _r0
	_s.Call.Returns[1] = _r1
	return _s
}

// Ret_r0 sets the exact values of the _r0 result parameter.
func (_s IEventRepository_MockSet_GetEventsByKey) Ret_r0(_r0 []model.IEvent) IEventRepository_MockSet_GetEventsByKey {
	_s.Call.Returns[0] = _r0
	return _s
}

// Ret_r1 sets the exact values of the _r1 result parameter.
func (_s IEventRepository_MockSet_GetEventsByKey) Ret_r1(_r1 error) IEventRepository_MockSet_GetEventsByKey {
	_s.Call.Returns[1] = _r1
	return _s
}

// Times sets number of times to call this caller of the method.
func (_s IEventRepository_MockSet_GetEventsByKey) Times(times int) IEventRepository_MockSet_GetEventsByKey {
	_s.Call.Times = times
	return _s
}
